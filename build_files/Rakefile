require 'erb'
require 'uri'
require 'net/http'
require 'net/https'
require 'rubygems'
require 'yaml'
require 'open-uri'
require 'fileutils'

STDOUT.sync = true
BASEDIR = File.dirname(__FILE__)
PTBVERSION = YAML.load_file(File.join(BASEDIR, 'version.yaml'))
PE_VERSION = ENV['PE_VERSION']
PRE_RELEASE = ENV['PE_RELEASE'] == 'true'
PE_FAMILY = ENV['PE_FAMILY']
STABLE = ENV['STABLE']

hostname = `hostname -s`.chomp
if ENV['VM_TYPE'] then
  VM_TYPE = ENV['VM_TYPE']
elsif hostname =~ /^(master|training|learning|student|ciab)$/ then
  VM_TYPE = hostname
else
  abort("ERROR: Unrecognized VM_TYPE parameter: #{VM_TYPE}")
end

# Pass in the number of student VMs to create when operating in
# classroom-in-a-box mode
if VM_TYPE == "ciab" then
  if ENV['NUM_WIN_VMS'] then
    NUM_WIN_VMS = ENV['NUM_WIN_VMS']
  else
    NUM_WIN_VMS = 0
  end
  FACTER_VAR="FACTER_num_win_vms=#{NUM_WIN_VMS}"
else
  FACTER_VAR=""
end

##############################################################
#                                                            #
# Methods to abstract the environment variable CL interface. #
#                                                            #
##############################################################

## The site directory and subdirectories are used by the shipping tasks
def site_dir
  ENV['SITE_DIR'] || '/srv/builder/Sites'
end

def cache_dir
  File.join(site_dir, 'cache')
end

def build_dir
  File.join(site_dir, 'build')
end

def ovf_dir
  File.join(site_dir, 'ovf')
end

def src_dir
  ENV['SRC_DIR'] || '/usr/src'
end

def facter_version
  ENV['FACTER_VERSION'] || '3.1.2'
end

def hiera_version
  ENV['HIERA_VERSION'] || '3.0.5'
end

def host_os
  `uname -s`
end


##########################
#                        #
# General helper methods #
#                        #
##########################

def cputs(string)
  puts "\033[1m#{string}\033[0m"
end

def cprint(string)
  print "\033[1m#{string}\033[0m"
end

#################################################
#                                               #
# Helper methods for the Install PE Master task #
#                                               #
#################################################

# At some point we might modify this method to specify dist, release, and arch
def installer_filename
  "puppet-enterprise-#{PE_VERSION}-el-7-x86_64.tar.gz"
end

def pe_installer_url
  if PRE_RELEASE
    "http://enterprise.delivery.puppetlabs.net/#{PE_FAMILY}/ci-ready/#{installer_filename}"
  else
    "https://s3.amazonaws.com/pe-builds/released/#{PE_VERSION}/#{installer_filename}"
  end
end

def installer_path
  "/training/file_cache/installers/#{installer_filename}"
end

def installer_dest
  if VM_TYPE == "training"
    "/root/puppet-enterprise"
  else
    "/tmp/puppet-enterprise"
  end
end

# Download the installer. Curl is nicer than re-inventing the wheel with ruby.
def download_installer
  unless installer_cached?
    puts "Downloading Puppet Enterprise"
    unless `curl #{pe_installer_url} -o #{installer_path}`
      fail "Error downloading the PE installer"
    end
  end
  puts "Untaring PE installer to #{installer_dest}"
  %x{mkdir #{installer_dest}}
  %x{tar xf #{installer_path} -C #{installer_dest} --strip-components=1}
end

# Check if the installer exists and the file isn't empty.
def installer_cached?
  File.exist?(installer_path) and File.zero?(installer_path) == false
end

def write_answers_file
  hostname = VM_TYPE
  File.open('/tmp/answers','w') do |f|
    f.write ERB.new(File.read('./templates/answers.erb')).result(binding)
  end
end

def write_pe_conf_file
  hostname = VM_TYPE
  File.open('/tmp/pe.conf','w') do |f|
    f.write ERB.new(File.read('./templates/pe.conf.erb')).result(binding)
  end
end

def install_pe
  if Gem::Version.new(PE_VERSION.split('-')[0]) < Gem::Version.new('2016.2.0')
    write_answers_file
    puts "Installing Puppet Enterprise with answers file for version #{PE_VERSION}"
    %x{#{installer_dest}/puppet-enterprise-installer -D -a /tmp/answers}
  else
    write_pe_conf_file
    puts "Installing Puppet Enterprise with pe.conf for version #{PE_VERSION}"
    %x{#{installer_dest}/puppet-enterprise-installer -D -c /tmp/pe.conf}
  end
end

########################################
#                                      #
# Helper methods for pre-install tasks #
#                                      #
########################################

def set_hostname
  # Set the dns info and hostname; must be done before puppet
  cputs "Setting hostname #{VM_TYPE}.puppetlabs.vm"
  %x{hostname #{VM_TYPE}.puppetlabs.vm}
  # Include /etc/hostname for centos7+
  File.open('/etc/hostname', 'w') { |file| file.write("#{VM_TYPE}.puppetlabs.vm") }
end

def edit_hosts
  cputs  "Editing /etc/hosts"
  %x{sed -i "s/127\.0\.0\.1.*/127.0.0.1 #{VM_TYPE}.puppetlabs.vm #{VM_TYPE} localhost localhost.localdomain localhost4/" /etc/hosts}
end

def configure_network
  cputs "Editing /etc/sysconfig/network"
  %x{sed -ie "s/HOSTNAME.*/HOSTNAME=#{VM_TYPE}.puppetlabs.vm/" /etc/sysconfig/network}
  %x{printf '\nsupersede domain-search "puppetlabs.vm";\n' >> /etc/dhcp/dhclient-eth0.conf}
end

################################################
#                                              #
# Helper methods for puppet-agent install task #
#                                              #
################################################

def add_yum_repo
  if File.read('/etc/redhat-release') =~ /release 6/ then
    cputs "Adding CentOS 6 yum repo"
    %x{rpm -Uvh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-6.noarch.rpm}
  else
    cputs "Adding CentOS 7 yum repo"
    %x{rpm -Uvh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm}
  end
end

def install_puppet_agent
  %x{yum -y install puppet-agent}
end

#####################################
#                                   #
# Helper methods for the build task #
#                                   #
#####################################

def install_r10k
  cputs "Installing R10K"
  system('PATH=$PATH:/opt/puppetlabs/puppet/bin:/usr/local/bin /opt/puppetlabs/puppet/bin/gem install r10k --no-RI --no-RDOC')
end

def install_build_dependency_modules
  cputs "Running r10k Puppetfile install for build dependencies"
  system('mkdir modules')
  puppetfile_name = ENV['STABLE'] == 'true' ? 'Puppetfile.stable' : 'Puppetfile'
  system("PUPPETFILE=./#{puppetfile_name} PATH=$PATH:/opt/puppetlabs/puppet/bin:/usr/local/bin /opt/puppetlabs/puppet/bin/r10k puppetfile install")
end

def install_persistent_modules
  cputs "Running r10k Puppetfile install for persistent modules"
  system("PUPPETFILE=./Puppetfile.#{VM_TYPE} PATH=$PATH:/opt/puppetlabs/puppet/bin:/usr/local/bin /opt/puppetlabs/puppet/bin/r10k puppetfile install")
end

def apply_bootstrap
  cputs "Running puppet apply -e 'include bootstrap::role::#{VM_TYPE}'"
  system("PATH=$PATH:/opt/puppetlabs/puppet/bin #{FACTER_VAR} puppet apply --detailed-exitcodes --modulepath=./modules:/opt/puppetlabs/puppet/modules --verbose -e 'include bootstrap::role::#{VM_TYPE}'")
  if ($?.exitstatus != 0) && ($?.exitstatus != 2)
    raise "Puppet failed with exit status #{$?.exitstatus}"
  end
end

##################################################
#                                                #
# Helper methods for the post-build cleanup task #
#                                                #
##################################################

def set_vm_version_file
  # Put version file in place on VM
  cputs "Editing /etc/vm-version"
  FileUtils.copy('./version.yaml','/etc/vm-version')
end

def set_puppet_release_file
  cputs "Editing /etc/puppetlabs-release"
  File.open('/etc/puppetlabs-release', 'w') do |file|
    file.write "#{PTBVERSION[:major]}.#{PTBVERSION[:minor]}"
  end
end

def apply_pre_manifest
  # Run pre update manifest
  cputs "Running pre update manifest"
  system('PATH=$PATH:/opt/puppetlabs/bin puppet apply --modulepath=./modules --verbose ./manifests/pre.pp')
end

def apply_cleanup_manifest
  # Run cleanup manifest
  cputs "Running cleanup manifest"
  system('PATH=$PATH:/opt/puppetlabs/bin puppet apply --modulepath=./modules --verbose ./manifests/post.pp')
end

def create_access_token
  %x{echo 'puppetlabs' | HOME=/root /opt/puppetlabs/bin/puppet-access login deployer --lifetime 365d}
end

def wait_for_puppet
  # Make sure it's ok to run puppet
  puts "Waiting for Puppet Run to complete..."
  while File.exist?('/opt/puppetlabs/puppet/cache/state/agent_catalog_run.lock') do
    sleep 10
  end
  puts "Waiting for Puppet server to start..."
  while (`curl -k -I https://localhost:8140/packages/ 2>/dev/null | grep "200 OK" > /dev/null`; ! $?.success?) do
    sleep 10
  end
  puts "Initializing Puppet Server"
  sleep 60
end

def stop_pe_processes
  #Stop all PE processes to free up memory
  %x{systemctl stop pe-*}
end

def remove_installer_files
  FileUtils.rm_rf([
    '/root/puppet-enterprise',
    Dir.glob('/root/puppet-enterprise*'),
    '/etc/yum.repos.d/puppet_enterprise.repo',
    '/usr/src/installer'
  ])
end

def remove_puppet_packages
  FileUtils.rm_rf('/opt/puppet/packages')
end

def remove_misc_files
  FileUtils.rm_rf([
    '/usr/src/education-builds',
    '/usr/src/puppet',
    Dir.glob('/usr/src/usr/share/doc/*'),
    '/usr/src/kernels'
  ])
end

def run_agent
  %x{puppet agent -t}
end

def set_puppet_config
  %x{opt/puppet/bin/puppet config set certname #{hostname}}
  %x{opt/puppet/bin/puppet config set server #{hostname}}
end

def student_cleanup
  %x{yum clean all}
  %x{yum makecache}
end

##################
#                #
# VM build tasks #
#                #
##################

desc "Print list of rake tasks"
task :default do
  system("rake -sT")  # s for silent
  cputs "NOTE: The usage of this Rakefile has changed.\n" + \
        "This is intended to be run within a blank VM to bootstrap it to the various Education VMs.\n" + \
        "To use this repo to provision a VM, refer to the files in the packer directory.\n"
end

desc "Base"
task :base do
  set_hostname
  edit_hosts
  configure_network
  if ["learning", "master"].include? VM_TYPE
    download_installer
    install_pe
  elsif ["student", "training", "ciab"].include? VM_TYPE
    add_yum_repo
    install_puppet_agent
  end
  FileUtils.rm_rf('/usr/src/build_files')
end

desc "Main"
task :main do
    install_r10k
    install_build_dependency_modules
    apply_bootstrap
    install_persistent_modules if File.exist?("./Puppetfile.#{VM_TYPE}")
  if ["learning", "master", "student", "training"].include? VM_TYPE
    create_access_token
    set_vm_version_file
    set_puppet_release_file
    apply_cleanup_manifest
  end
  if ["student", "training"].include? VM_TYPE
    %x{yum -y remove puppet-agent}
  end
end

desc "Full"
task :full => [:base, :main]

desc "Clean up"
task :clean do
  if ["learning"].include? VM_TYPE
    wait_for_puppet
    run_agent
  end
  if ["lms","learning"].include? VM_TYPE
    stop_pe_processes
    remove_installer_files
  end
  if ["lms"].include? VM_TYPE
    set_puppet_config
    remove_puppet_packages
    remove_misc_files
  end
  if ["student", "training"].include? VM_TYPE
    student_cleanup
  end
  FileUtils.rm_rf('/usr/src/build_files')
end

desc "Update VM to latest build. Note: This will reset the root password to match the login screen"
task :update do
  apply_pre_manifest
  Rake::Task["main"].invoke
end
